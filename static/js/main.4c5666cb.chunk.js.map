{"version":3,"sources":["components/header/header.component.jsx","components/search/search.component.jsx","components/item/item.component.jsx","components/result/result.component.jsx","components/container/container.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Search","props","type","placeholder","onChange","e","target","value","Item","useState","fadeIn","setFadeIn","title","onClick","setTimeout","symbol","keywords","id","Results","useEffect","clipboard","Clipboard","destroy","emojiFiltered","slice","map","emoji","uuidv4","Container","emojiData","setEmojiData","newEmojiData","setNewEmojiData","searchQuery","setSearchQuery","data","val","toLowerCase","queryKeywords","trim","split","newEmojis","queryLength","length","queryLengthSum","forEach","item","removeDuplicates","Set","query","keyword","indexOf","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yrsKAUeA,MARf,WACE,OACE,qBAAKC,UAAU,SAAf,SACE,iD,MCWSC,MAdf,SAAgBC,GAId,OACE,uBACEF,UAAU,SACVG,KAAK,OACLC,YAAY,0BACZC,SARa,SAACC,GAChBJ,EAAMG,SAASC,EAAEC,OAAOC,W,MCwBbC,MAzBf,SAAcP,GACZ,MAA4BQ,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAOA,OACE,sBAEEZ,UAAU,OACVa,MAAM,uCACNC,QAVgB,SAACR,GACnBM,GAAU,GACVG,YAAW,kBAAMH,GAAU,KAAQ,MASjC,sBAAqBV,EAAMc,OAC3B,gBAAed,EAAMe,SANvB,UAQE,qBAAKjB,UAAS,oBAAeW,EAAS,aAAe,eAArD,qBAGA,sBAAMX,UAAU,aAAhB,SAA8BE,EAAMc,WAV/Bd,EAAMgB,K,8BCUFC,MAjBf,SAAiBjB,GAQf,OAPAkB,qBAAU,WACR,IAAMC,EAAY,IAAIC,IAAU,SAChC,OAAO,WACHD,EAAUE,cAKd,qBAAKvB,UAAU,UAAf,SACGE,EAAMsB,cAAcC,MAAM,EAAG,KAAKC,KAAI,SAACC,GAAD,OACrC,cAAC,EAAD,CAAMT,GAAIU,eAAUZ,OAAQW,EAAMX,OAAQH,MAAOc,EAAMd,MAAOI,SAAUU,EAAMV,UAAeW,sB,cC8BtFC,MAxCf,WACE,MAAkCnB,mBAAS,IAA3C,mBAAOoB,EAAP,KAAkBC,EAAlB,KACA,EAAwCrB,mBAAS,IAAjD,mBAAOsB,EAAP,KAAqBC,EAArB,KACA,EAAsCvB,mBAAS,IAA/C,mBAAOwB,EAAP,KAAoBC,EAApB,KA6BA,OA3BAf,qBAAU,WACRW,EAAaK,KACZ,IA0BD,sBAAKpC,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQK,SA3BK,SAACgC,GAChBF,EAAeE,EAAIC,eACnB,IAAIC,EAAgBF,EAAIC,cAAcE,OAAOC,MAAM,KAC/CC,EAAY,GACZC,EAAcJ,EAAcK,OAC5BC,EAAiB,EACK,KAAtBR,EAAIC,eACNR,EAAUgB,SAAQ,SAACC,GACjB,IAAIC,EAAgB,YAAO,IAAIC,IAAIF,EAAK9B,SAASuB,OAAOC,MAAM,OAC9DI,EAAiB,EACjBN,EAAcO,SAAQ,SAACI,GACrBF,EAAiBF,SAAQ,SAACK,GACpBA,EAAQC,QAAQF,IAAU,GAC5BL,UAIFF,GAAeE,GACjBH,EAAUW,KAAKN,MAIrBd,EAAgBS,MAMd,cAAC,EAAD,CAASlB,cAA+B,KAAhBU,EAAqBJ,EAAYE,QCnChDsB,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4c5666cb.chunk.js","sourcesContent":["import \"./header.styles.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Emoji Search</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import \"./search.styles.css\";\r\n\r\nfunction Search(props) {\r\n  const onChange = (e) => {\r\n    props.onChange(e.target.value);\r\n  };\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"text\"\r\n      placeholder=\"Search for a keyword...\"\r\n      onChange={onChange}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import { useState } from \"react\";\r\nimport \"./item.styles.css\";\r\n\r\nfunction Item(props) {\r\n  const [fadeIn, setFadeIn] = useState(false);\r\n\r\n  const handleClick = (e) => {\r\n    setFadeIn(true);\r\n    setTimeout(() => setFadeIn(false), 900);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      key={props.id}\r\n      className=\"item\"\r\n      title=\"Copy Emoji to Clipboard ðŸ“‹\"\r\n      onClick={handleClick}\r\n      data-clipboard-text={props.symbol}\r\n      data-keywords={props.keywords}\r\n    >\r\n      <div className={`item-copy ${fadeIn ? \"label-true\" : \"label-false\"}`}>\r\n        Copied!\r\n      </div>\r\n      <span className=\"item-emoji\">{props.symbol}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Item;\r\n","import { useEffect } from 'react';\r\nimport Item from '../item/item.component'\r\nimport Clipboard from \"clipboard\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './result.styles.css'\r\n\r\nfunction Results(props) {\r\n  useEffect(() => {\r\n    const clipboard = new Clipboard(\".item\");\r\n    return () => {\r\n        clipboard.destroy();\r\n    };\r\n  })\r\n\r\n  return (\r\n    <div className=\"results\">\r\n      {props.emojiFiltered.slice(0, 100).map((emoji) => (\r\n        <Item id={uuidv4()} symbol={emoji.symbol} title={emoji.title} keywords={emoji.keywords} key={uuidv4()}/>\r\n\t\t\t))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Results\r\n","import { useState, useEffect } from \"react\";\r\nimport Header from \"../header/header.component\";\r\nimport Search from \"../search/search.component\";\r\nimport Results from \"../result/result.component\";\r\nimport data from \"../data/data.json\";\r\nimport \"./container.styles.css\";\r\n\r\nfunction Container() {\r\n  const [emojiData, setEmojiData] = useState([]);\r\n  const [newEmojiData, setNewEmojiData] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setEmojiData(data);\r\n  }, []);\r\n  const onChange = (val) => {\r\n    setSearchQuery(val.toLowerCase());\r\n    let queryKeywords = val.toLowerCase().trim().split(\" \");\r\n    let newEmojis = [];\r\n    let queryLength = queryKeywords.length;\r\n    let queryLengthSum = 0;\r\n    if (val.toLowerCase() !== \"\") {\r\n      emojiData.forEach((item) => {\r\n        let removeDuplicates = [...new Set(item.keywords.trim().split(\" \"))];\r\n        queryLengthSum = 0;\r\n        queryKeywords.forEach((query) => {\r\n          removeDuplicates.forEach((keyword) => {\r\n            if (keyword.indexOf(query) >= 0) {\r\n              queryLengthSum++;\r\n            }\r\n          });\r\n        });\r\n        if (queryLength <= queryLengthSum) {\r\n          newEmojis.push(item);\r\n        }\r\n      });\r\n    }\r\n    setNewEmojiData(newEmojis);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      <Search onChange={onChange} />\r\n      <Results emojiFiltered={searchQuery === \"\" ? emojiData : newEmojiData} />\r\n    </div>\r\n  );\r\n}\r\nexport default Container;\r\n","import Container from './components/container/container.component'\n\nfunction App() {\n  return (\n    <Container />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}